Found 1 error (1 fixed, 0 remaining).
diff --git a/.github/workflows/ruff_output.txt b/.github/workflows/ruff_output.txt
index 9a2fb26..0abcfaf 100644
--- a/.github/workflows/ruff_output.txt
+++ b/.github/workflows/ruff_output.txt
@@ -1,44 +1 @@
-All checks passed!
-diff --git a/.github/workflows/ruff_output.txt b/.github/workflows/ruff_output.txt
-index 63b1f38..1f5f344 100644
---- a/.github/workflows/ruff_output.txt
-+++ b/.github/workflows/ruff_output.txt
-@@ -1,37 +1 @@
--Found 4 errors (4 fixed, 0 remaining).
--diff --git a/script.py b/script.py
--index 68309a4..055dd8d 100644
----- a/script.py
--+++ b/script.py
--@@ -12,7 +12,8 @@ from fastapi.requests import Request
-- 
-- from pydantic import BaseModel, Field
-- from typing import List
---import os, re
--+import os
--+import re
-- import requests
-- 
-- class RAGLlm(BaseModel):
--@@ -172,7 +173,7 @@ async def rag3(request: Request, request_data: RAGLlm):
--     
--     else:
--         print(f"Data file: '{doc_name}' does not exists.")
---        temp_dir = f'./data/temp'
--+        temp_dir = './data/temp'
--         os.makedirs(temp_dir, exist_ok=True)
-- 
--         response = requests.get(request_data.context)
--@@ -188,10 +189,10 @@ async def rag3(request: Request, request_data: RAGLlm):
--         filePDF = re.search(r"pdf$", doc_path)
-- 
--         if filePDF: # Checks if file type is pdf, else doc/docx
---            print(f"File type is pdf")
--+            print("File type is pdf")
--             loader = PyPDFLoader(doc_path)
--         else:
---            print(f"File type is doc/docx/txt")
--+            print("File type is doc/docx/txt")
--             loader = UnstructuredFileLoader(doc_path)
-- 
--         pages = loader.load_and_split()
-+All checks passed!
+Found 1 error (1 fixed, 0 remaining).
diff --git a/script.py b/script.py
index c1037d8..055dd8d 100644
--- a/script.py
+++ b/script.py
@@ -12,7 +12,8 @@ from fastapi.requests import Request
 
 from pydantic import BaseModel, Field
 from typing import List
-import os,re
+import os
+import re
 import requests
 
 class RAGLlm(BaseModel):
